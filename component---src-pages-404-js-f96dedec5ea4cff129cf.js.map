{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["Layout","children","data","useStaticQuery","Header","siteTitle","site","siteMetadata","title","Date","getFullYear","href","SEO","description","lang","meta","metaDescription","defaultTitle","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","NotFoundPage"],"mappings":"mJAgCeA,G,UA1BA,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SACVC,EAAOC,yBAAe,cAU5B,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,WAAW,UAAAH,EAAKI,KAAKC,oBAAV,eAAwBC,QAAxB,UAEnB,8BAAOP,GAEP,sCACO,IAAIQ,MAAOC,cADlB,mBAGI,uBAAGC,KAAK,KAAR,a,YCdV,SAASC,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMP,EAAS,EAATA,MAC9BF,EAASH,yBAAe,YAAxBG,KAcFU,EAAkBH,GAAeP,EAAKC,aAAaM,YACnDI,EAAY,UAAGX,EAAKC,oBAAR,aAAG,EAAmBC,MAExC,OACE,kBAACU,EAAA,EAAD,CACEC,eAAgB,CACdL,QAEFN,MAAOA,EACPY,cAAeH,EAAY,QAAWA,EAAiB,KACvDF,KAAM,CACJ,CACEM,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASd,GAEX,CACEe,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAhB,EAAKC,oBAAL,eAAmBiB,SAAnB,IAEX,CACEH,KAAK,gBACLC,QAASd,GAEX,CACEa,KAAK,sBACLC,QAASN,IAEXS,OAAOV,IAET,0BAAMQ,SAAS,WAAWD,QAAS,2CACnC,0BAAMC,SAAS,iBAAiBD,QAAQ,QACxC,0BAAMC,SAAS,iBAAiBD,QAAQ,SAK9CV,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,QC/EAe,UARM,kBACnB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAKnB,MAAM,mBACX,8CACA","file":"component---src-pages-404-js-f96dedec5ea4cff129cf.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./Header\"\nimport \"../css/layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n\n      <main>{children}</main>\n      \n      <footer>\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"/\">React</a>\n      </footer>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    >\n      <meta property=\"og:image\" content={\"https://zsi-gatsby.netlify.app/og1.png\"} />\n      <meta property=\"og:image:width\" content=\"520\" />\n      <meta property=\"og:image:width\" content=\"380\" />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>404: Not Found</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n"],"sourceRoot":""}